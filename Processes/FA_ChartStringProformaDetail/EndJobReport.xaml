<Activity mc:Ignorable="sap sap2010 sads" x:Class="SendJobReport"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities"
 xmlns:s="clr-namespace:System;assembly=mscorlib"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:ss="clr-namespace:System.Security;assembly=mscorlib"
 xmlns:ui="http://schemas.uipath.com/workflow/activities"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_TransactionData" Type="InArgument(scg:List(ui:QueueItem))" />
    <x:Property Name="in_Config" Type="InArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property Name="in_ProcessName" Type="InArgument(x:String)" />
    <x:Property Name="in_HtmlTemplate" Type="InArgument(x:String)" />
    <x:Property Name="in_HtmlLogo" Type="InArgument(x:String)" />
    <x:Property Name="in_EmailCredentials" Type="InArgument(x:String)" />
    <x:Property Name="in_EmailRecipients" Type="InArgument(x:String)" />
    <x:Property Name="in_TransactionItem" Type="InArgument(x:String)" />
    <x:Property Name="out_IssuesReporting" Type="OutArgument(s:Exception)" />
    <x:Property Name="in_EmailTimeout" Type="InArgument(x:Int32)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>SendJobReport_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.Security.Principal</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>Microsoft.VisualStudio.Services.Common</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.Data.Entity</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Plugin.Workflow</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Description: Generates a list of all items processed, will send of an email or can can save a transaction log to a folder. If the folder is dropped straight into the project directory then there should be minimal changes required.&#xA;&#xA;NOTE: When setting a transaction status, the item in orchestrator is updated but not the one used by the robot. To use this reporting the transaction must be updated upon setting the transaction status. Example provided below.&#xA;&#xA;Required Inputs:&#xA;in_TransactionData (List&lt;QueueItem&gt;): List of transaction items processed during the job, to set up this declare a New List(Of QueueItem) in your main workflow and add each transaction to the list after setting the status.&#xA;&#xA;Optional Arguments:&#xA;All optional arguments are assigned to the specific variable if it's assigned, or they will take the value specified in the configuration file if its specified is a key, or there will be a default value to handle the argument being ommitted, all values are strings.&#xA;in_Argument (String)&#xA;in_Config(&quot;Argument&quot;).ToString&#xA;&quot;Argument&quot;&#xA;&#xA;in_Config (Dictionary&lt;String, Object&gt;): Configuration file where all settings can be declared.&#xA;&#xA;in_ProcessName (String): The name of the process\robot, will use the robot machine\username if not provided.&#xA;in_HtmlTemplate (String): Path to email template.&#xA;in_HtmlLogo (String): Path to robot logo.&#xA;in_EmailCredentials (String): Credential asset in orchestrator to use in exchange.&#xA;in_EmailRecipients (String): String asset in orchestrator with a list of semicolon separated email addresses. (eg. &quot;test@email.com;email@test.com&quot;)&#xA;in_LogWorkbook (String): Path to a transaction log workbook.&#xA;in_LogSheet (String): Name of the transaction log worksheet, will use in_ProcessName if not provided.&#xA;&#xA;Outputs: NA&#xA;&#xA;Pre Condition:&#xA;TransactionLog must be initialised.&#xA;RobotSupport (TBC) asset must exist in orchestrator.&#xA;&#xA;Post Condition:&#xA;Some notice sent to to the team." DisplayName="SendJobReport" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="scg:Dictionary(x:String, x:String)" Default="[New Dictionary(Of String, String)]" Name="TemplateSections" />
      <Variable x:TypeArguments="x:String" Name="HtmlReportMessage" />
    </Sequence.Variables>
    <ui:CommentOut DisplayName="Comment Out" sap2010:WorkflowViewState.IdRef="CommentOut_2">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Example for setting transaction status" sap2010:WorkflowViewState.IdRef="Sequence_4">
          <Sequence.Variables>
            <Variable x:TypeArguments="ui:QueueItem" Name="transaction" />
            <Variable x:TypeArguments="scg:IEnumerable(ui:QueueItem)" Name="items" />
          </Sequence.Variables>
          <ui:SetTransactionStatus ContinueOnError="{x:Null}" Reason="{x:Null}" ServiceBaseAddress="{x:Null}" TimeoutMS="{x:Null}" DisplayName="Set Transaction Status" ErrorType="Business" sap2010:WorkflowViewState.IdRef="SetTransactionStatus_1" Status="Successful" TransactionItem="[transaction]">
            <ui:SetTransactionStatus.Output>
              <scg:Dictionary x:TypeArguments="x:String, InArgument" />
            </ui:SetTransactionStatus.Output>
          </ui:SetTransactionStatus>
          <ui:GetQueueItems Duration="{x:Null}" From="{x:Null}" Priority="{x:Null}" QueueName="{x:Null}" Skip="{x:Null}" TimeoutMS="{x:Null}" To="{x:Null}" Top="{x:Null}" DisplayName="Get Queue Items" FilterStrategy="StartsWith" sap2010:WorkflowViewState.IdRef="GetQueueItems_1" QueueItemStates="All" Reference="[transaction.Reference]" Result="[items]" />
          <Assign DisplayName="Assign transaction" sap2010:WorkflowViewState.IdRef="Assign_5">
            <Assign.To>
              <OutArgument x:TypeArguments="ui:QueueItem">[transaction]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="ui:QueueItem">[items.FirstOrDefault]</InArgument>
            </Assign.Value>
          </Assign>
        </Sequence>
      </ui:CommentOut.Body>
    </ui:CommentOut>
    <Sequence DisplayName="Set argument default variables" sap2010:WorkflowViewState.IdRef="Sequence_28">
      <If Condition="[in_Config Is Nothing]" DisplayName="If config not declared" sap2010:WorkflowViewState.IdRef="If_19">
        <If.Then>
          <Assign DisplayName="Init Config" sap2010:WorkflowViewState.IdRef="Assign_60">
            <Assign.To>
              <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[in_Config]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[New Dictionary(Of String, Object)]</InArgument>
            </Assign.Value>
          </Assign>
        </If.Then>
      </If>
      <If Condition="[in_ProcessName IsNot Nothing]" DisplayName="If ProcessName declared" sap2010:WorkflowViewState.IdRef="If_18">
        <If.Else>
          <If Condition="[in_Config.ContainsKey(&quot;ProcessName&quot;)]" DisplayName="If ProcessName configured" sap2010:WorkflowViewState.IdRef="If_17">
            <If.Then>
              <Assign DisplayName="Assign ProcessName" sap2010:WorkflowViewState.IdRef="Assign_59">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[in_ProcessName]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[in_Config("ProcessName").ToString]</InArgument>
                </Assign.Value>
              </Assign>
            </If.Then>
            <If.Else>
              <Assign DisplayName="Assign Default" sap2010:WorkflowViewState.IdRef="Assign_49">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[in_ProcessName]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[System.Security.Principal.WindowsIdentity.GetCurrent().Name.Replace(System.Environment.UserDomainName+"\","")]</InArgument>
                </Assign.Value>
              </Assign>
            </If.Else>
          </If>
        </If.Else>
      </If>
      <If Condition="[in_TransactionItem IsNot Nothing]" DisplayName="If TransactionItem declared" sap2010:WorkflowViewState.IdRef="If_36">
        <If.Else>
          <If Condition="[in_Config.ContainsKey(&quot;TransactionItem&quot;)]" DisplayName="If TransactionItem configured" sap2010:WorkflowViewState.IdRef="If_35">
            <If.Then>
              <Assign DisplayName="Assign TransactionItem" sap2010:WorkflowViewState.IdRef="Assign_81">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[in_TransactionItem]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[in_Config("TransactionItem").ToString]</InArgument>
                </Assign.Value>
              </Assign>
            </If.Then>
            <If.Else>
              <Assign DisplayName="Assign Default" sap2010:WorkflowViewState.IdRef="Assign_82">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[in_TransactionItem]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">transaction</InArgument>
                </Assign.Value>
              </Assign>
            </If.Else>
          </If>
        </If.Else>
      </If>
      <If Condition="[in_HtmlTemplate IsNot Nothing]" DisplayName="If HtmlTemplate declared" sap2010:WorkflowViewState.IdRef="If_21">
        <If.Else>
          <If Condition="[in_Config.ContainsKey(&quot;HtmlTemplate&quot;)]" DisplayName="If HtmlTemplate configured" sap2010:WorkflowViewState.IdRef="If_20">
            <If.Then>
              <Assign DisplayName="Assign HtmlTemplate" sap2010:WorkflowViewState.IdRef="Assign_61">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[in_HtmlTemplate]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[in_Config("HtmlTemplate").ToString]</InArgument>
                </Assign.Value>
              </Assign>
            </If.Then>
            <If.Else>
              <Assign DisplayName="Assign Default" sap2010:WorkflowViewState.IdRef="Assign_62">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[in_HtmlTemplate]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">Data\report.html</InArgument>
                </Assign.Value>
              </Assign>
            </If.Else>
          </If>
        </If.Else>
      </If>
      <If Condition="[in_HtmlLogo Is Nothing And in_Config.ContainsKey(&quot;HtmlLogo&quot;)]" DisplayName="If HtmlLogo not declared and HtmlLogo configured" sap2010:WorkflowViewState.IdRef="If_22">
        <If.Then>
          <Assign DisplayName="Assign HtmlLogo" sap2010:WorkflowViewState.IdRef="Assign_63">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[in_HtmlLogo]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[in_Config("HtmlLogo").ToString]</InArgument>
            </Assign.Value>
          </Assign>
        </If.Then>
      </If>
      <If Condition="[in_EmailCredentials IsNot Nothing]" DisplayName="If EmailCredentials declared" sap2010:WorkflowViewState.IdRef="If_25">
        <If.Else>
          <If Condition="[in_Config.ContainsKey(&quot;Credentials_Exchange&quot;)]" DisplayName="If EmailCredentials configured" sap2010:WorkflowViewState.IdRef="If_24">
            <If.Then>
              <Assign DisplayName="Assign EmailCredentials" sap2010:WorkflowViewState.IdRef="Assign_65">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[in_EmailCredentials]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[in_Config("Credentials_Exchange").ToString]</InArgument>
                </Assign.Value>
              </Assign>
            </If.Then>
            <If.Else>
              <Assign DisplayName="Assign Default" sap2010:WorkflowViewState.IdRef="Assign_66">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[in_EmailCredentials]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">SSO_rpa00002</InArgument>
                </Assign.Value>
              </Assign>
            </If.Else>
          </If>
        </If.Else>
      </If>
      <If Condition="[in_Config.ContainsKey(&quot;JobReport_Recipients&quot;) And in_EmailRecipients Is Nothing]" DisplayName="If EmailRecipients configured and not declared" sap2010:WorkflowViewState.IdRef="If_26">
        <If.Then>
          <Assign DisplayName="Assign EmailRecipients" sap2010:WorkflowViewState.IdRef="Assign_67">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[in_EmailRecipients]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[in_Config("JobReport_Recipients").ToString]</InArgument>
            </Assign.Value>
          </Assign>
        </If.Then>
      </If>
      <If Condition="[in_Config.ContainsKey(&quot;TimeoutLong&quot;) And in_EmailTimeout = 0]" DisplayName="If EmailTimeoutconfigured and not declared" sap2010:WorkflowViewState.IdRef="If_45">
        <If.Then>
          <Assign DisplayName="Assign EmailTimeout" sap2010:WorkflowViewState.IdRef="Assign_111">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">[in_EmailTimeout]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">[CInt(in_Config("TimeoutLong"))]</InArgument>
            </Assign.Value>
          </Assign>
        </If.Then>
      </If>
      <If Condition="[in_EmailTimeout &lt;= 0]" DisplayName="If EmailTimeout declared" sap2010:WorkflowViewState.IdRef="If_46">
        <If.Then>
          <Assign DisplayName="Assign Default" sap2010:WorkflowViewState.IdRef="Assign_112">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">[in_EmailTimeout]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">120000</InArgument>
            </Assign.Value>
          </Assign>
        </If.Then>
      </If>
    </Sequence>
    <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;Start SendJobReport.xaml, for &quot; &amp; in_TransactionData.Count &amp; &quot; transactions&quot;]" />
    <Flowchart sap2010:WorkflowViewState.IdRef="Flowchart_1">
      <Flowchart.StartNode>
        <FlowStep x:Name="__ReferenceID0" sap2010:WorkflowViewState.IdRef="FlowStep_1">
          <Sequence DisplayName="Contruct HTML message" sap2010:WorkflowViewState.IdRef="Sequence_53">
            <Sequence DisplayName="Unpack template" sap2010:WorkflowViewState.IdRef="Sequence_13">
              <Sequence.Variables>
                <Variable x:TypeArguments="s:String[]" Name="html" />
                <Variable x:TypeArguments="x:String" Name="key" />
              </Sequence.Variables>
              <Assign DisplayName="Assign file lines" sap2010:WorkflowViewState.IdRef="Assign_9">
                <Assign.To>
                  <OutArgument x:TypeArguments="s:String[]">[html]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="s:String[]">[File.ReadAllLines(in_HtmlTemplate)]</InArgument>
                </Assign.Value>
              </Assign>
              <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="For Each Template Section" sap2010:WorkflowViewState.IdRef="ForEach`1_6" Values="[html]">
                <ui:ForEach.Body>
                  <ActivityAction x:TypeArguments="x:String">
                    <ActivityAction.Argument>
                      <DelegateInArgument x:TypeArguments="x:String" Name="item" />
                    </ActivityAction.Argument>
                    <If Condition="[item.StartsWith(&quot;--&quot;)]" DisplayName="If start of section" sap2010:WorkflowViewState.IdRef="If_9">
                      <If.Then>
                        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_12">
                          <Assign DisplayName="Assign formatted item key" sap2010:WorkflowViewState.IdRef="Assign_10">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:String">[key]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:String">[item.TrimStart("-"c)]</InArgument>
                            </Assign.Value>
                          </Assign>
                          <Assign DisplayName="Assign new part" sap2010:WorkflowViewState.IdRef="Assign_11">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:String">[TemplateSections(key)]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:String">
                                <Literal x:TypeArguments="x:String" Value="" />
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                        </Sequence>
                      </If.Then>
                      <If.Else>
                        <Assign DisplayName="Append more parts" sap2010:WorkflowViewState.IdRef="Assign_12">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[TemplateSections(key)]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[TemplateSections(key).TrimStart + vbNewLine + item]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </If.Else>
                    </If>
                  </ActivityAction>
                </ui:ForEach.Body>
              </ui:ForEach>
              <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_12" Level="Trace" Message="[&quot;Got template parts &quot; + String.Join(&quot;, &quot;, TemplateSections.Keys)]" />
              <Assign DisplayName="Assign TransactionItem" sap2010:WorkflowViewState.IdRef="Assign_92">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[HtmlReportMessage]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[TemplateSections("HtmlTemplate")]</InArgument>
                </Assign.Value>
              </Assign>
            </Sequence>
            <If Condition="[in_TransactionData.Count &gt; 0 Or False]" DisplayName="If any items processed" sap2010:WorkflowViewState.IdRef="If_10">
              <If.Then>
                <Sequence DisplayName="SuccessMessage" sap2010:WorkflowViewState.IdRef="Sequence_40">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="x:Int32" Name="successCount" />
                    <Variable x:TypeArguments="x:Int32" Name="totalCount" />
                  </Sequence.Variables>
                  <Assign DisplayName="Assign SuccessCount" sap2010:WorkflowViewState.IdRef="Assign_84">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[successCount]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[CInt(in_TransactionData.LongCount(Function(qi) qi.Status = QueueItemStatus.Successful))]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_4" Level="Trace" Message="[&quot;Got &quot; &amp; successCount &amp; &quot; successful items&quot;]" />
                  <Assign DisplayName="Assign TotalCount" sap2010:WorkflowViewState.IdRef="Assign_94">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[totalCount]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[in_TransactionData.Count]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign DisplayName="Assign SuccessMessage" sap2010:WorkflowViewState.IdRef="Assign_87">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[HtmlReportMessage]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String" xml:space="preserve">[HtmlReportMessage.
Replace("{MessageStatus}", TemplateSections("SuccessMessage")).
Replace("{Success}", If(successCount = totalCount, TemplateSections("AllItems"), TemplateSections("SomeItems"))).
Replace("{SuccessCount}", successCount.ToString).
Replace("{TotalCount}", totalCount.ToString).
Replace("{ALL}", If(successCount &lt;&gt; 1, "all ", "")).
Replace("{S}", If(successCount &lt;&gt; 1, "s", ""))]</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </If.Then>
              <If.Else>
                <Assign DisplayName="Assign NoItems" sap2010:WorkflowViewState.IdRef="Assign_16">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[HtmlReportMessage]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String" xml:space="preserve">[HtmlReportMessage.
Replace("{MessageStatus}", TemplateSections("NoItems")).
Replace("{TransactionItem}", in_TransactionItem).
Replace("{S}", "s")]</InArgument>
                  </Assign.Value>
                </Assign>
              </If.Else>
            </If>
            <If Condition="[in_TransactionData.Any(Function(qi) qi.Status = QueueItemStatus.Failed)]" DisplayName="If any items failed" sap2010:WorkflowViewState.IdRef="If_12">
              <If.Then>
                <Sequence DisplayName="FailureMessage" sap2010:WorkflowViewState.IdRef="Sequence_44">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="scg:List(ui:QueueItem)" Name="failedItems" />
                    <Variable x:TypeArguments="x:Boolean" Default="False" Name="both" />
                  </Sequence.Variables>
                  <Assign DisplayName="Assign FailedCount" sap2010:WorkflowViewState.IdRef="Assign_95">
                    <Assign.To>
                      <OutArgument x:TypeArguments="scg:List(ui:QueueItem)">[failedItems]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="scg:List(ui:QueueItem)">[in_TransactionData.Where(Function(qi) qi.Status = QueueItemStatus.Failed).ToList]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_15" Level="Trace" Message="[&quot;Got &quot; &amp; failedItems.Count &amp; &quot; failed items&quot;]" />
                  <Assign DisplayName="Assign FailureMessage" sap2010:WorkflowViewState.IdRef="Assign_27">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[HtmlReportMessage]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String" xml:space="preserve">[HtmlReportMessage.
Replace("{FailureMessage}", TemplateSections("FailureMessage")).
Replace("{FailedCount}", failedItems.Count.ToString).
Replace("{F}", If(failedItems.Count &lt;&gt; 1, "s", ""))]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <If Condition="[failedItems.Any(Function(qi) qi.ProcessingException.Type = ProcessingExceptionType.BusinessException)]" DisplayName="If RuleException" sap2010:WorkflowViewState.IdRef="If_14">
                    <If.Then>
                      <Sequence DisplayName="RuleException" sap2010:WorkflowViewState.IdRef="Sequence_45">
                        <Sequence.Variables>
                          <Variable x:TypeArguments="scg:List(ui:QueueItem)" Name="ruleExceptionItems" />
                          <Variable x:TypeArguments="scg:List(x:String)" Default="[New List(Of String)]" Name="tableRows" />
                        </Sequence.Variables>
                        <Assign DisplayName="Assign both rules set" sap2010:WorkflowViewState.IdRef="Assign_107">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Boolean">[both]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                          </Assign.Value>
                        </Assign>
                        <Assign DisplayName="Assign RuleExceptionItems" sap2010:WorkflowViewState.IdRef="Assign_98">
                          <Assign.To>
                            <OutArgument x:TypeArguments="scg:List(ui:QueueItem)">[ruleExceptionItems]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="scg:List(ui:QueueItem)">[failedItems.Where(Function(qi) qi.ProcessingException.Type = ProcessingExceptionType.BusinessException).ToList]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_16" Level="Trace" Message="[&quot;Got &quot; &amp; ruleExceptionItems.Count &amp; &quot; rule exceptions&quot;]" />
                        <ui:ForEach x:TypeArguments="ui:QueueItem" CurrentIndex="{x:Null}" DisplayName="For Each RuleException" sap2010:WorkflowViewState.IdRef="ForEach`1_10" Values="[ruleExceptionItems]">
                          <ui:ForEach.Body>
                            <ActivityAction x:TypeArguments="ui:QueueItem">
                              <ActivityAction.Argument>
                                <DelegateInArgument x:TypeArguments="ui:QueueItem" Name="item" />
                              </ActivityAction.Argument>
                              <Sequence DisplayName="ProcessingException" sap2010:WorkflowViewState.IdRef="Sequence_46">
                                <Sequence.Variables>
                                  <Variable x:TypeArguments="s:String[]" Name="formatted" />
                                </Sequence.Variables>
                                <If Condition="[item.ProcessingException.Reason.Contains(vbNewLine) And item.ProcessingException.Reason.Contains(vbTab)]" DisplayName="If formatted" sap2010:WorkflowViewState.IdRef="If_39">
                                  <If.Then>
                                    <Assign DisplayName="Assign formatted" sap2010:WorkflowViewState.IdRef="Assign_100">
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="s:String[]">[formatted]</OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="s:String[]">[item.ProcessingException.Reason.Split((vbNewLine + vbTab).ToCharArray)]</InArgument>
                                      </Assign.Value>
                                    </Assign>
                                  </If.Then>
                                  <If.Else>
                                    <Assign DisplayName="Assign no format" sap2010:WorkflowViewState.IdRef="Assign_101">
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="s:String[]">[formatted]</OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="s:String[]">[{"", item.ProcessingException.Reason, item.ProcessingException.Details}]</InArgument>
                                      </Assign.Value>
                                    </Assign>
                                  </If.Else>
                                </If>
                                <AddToCollection x:TypeArguments="x:String" Collection="[tableRows]" DisplayName="Add To RuleException" sap2010:WorkflowViewState.IdRef="AddToCollection`1_10" Item="[String.Format(TemplateSections(&quot;TableRows&quot;), item.Reference, formatted(0), formatted(1), String.Join(vbNewLine, formatted.Skip(2)))]" />
                              </Sequence>
                            </ActivityAction>
                          </ui:ForEach.Body>
                        </ui:ForEach>
                        <Assign DisplayName="Assign RuleException" sap2010:WorkflowViewState.IdRef="Assign_96">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[HtmlReportMessage]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String" xml:space="preserve">[HtmlReportMessage.
Replace("{RuleException}", TemplateSections("RuleException")).
Replace("{TableRows}", String.Join("", tableRows)).
Replace("{B}", If(ruleExceptionItems.Count &lt;&gt; 1, "s", ""))]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </If.Then>
                    <If.Else>
                      <Assign DisplayName="Assign no RuleException" sap2010:WorkflowViewState.IdRef="Assign_97">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[HtmlReportMessage]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String" xml:space="preserve">[HtmlReportMessage.
Replace("{RuleException}", "")]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Else>
                  </If>
                  <If Condition="[failedItems.Any(Function(qi) qi.ProcessingException.Type = ProcessingExceptionType.ApplicationException)]" DisplayName="If SystemError" sap2010:WorkflowViewState.IdRef="If_41">
                    <If.Then>
                      <Sequence DisplayName="SystemError" sap2010:WorkflowViewState.IdRef="Sequence_48">
                        <Sequence.Variables>
                          <Variable x:TypeArguments="scg:List(ui:QueueItem)" Name="systemErrorItems" />
                          <Variable x:TypeArguments="scg:List(x:String)" Default="[New List(Of String)]" Name="tableRows" />
                        </Sequence.Variables>
                        <Assign DisplayName="Assign SystemErrorItems" sap2010:WorkflowViewState.IdRef="Assign_102">
                          <Assign.To>
                            <OutArgument x:TypeArguments="scg:List(ui:QueueItem)">[systemErrorItems]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="scg:List(ui:QueueItem)">[failedItems.Where(Function(qi) qi.ProcessingException.Type = ProcessingExceptionType.ApplicationException).ToList]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_17" Level="Trace" Message="[&quot;Got &quot; &amp; systemErrorItems.Count &amp; &quot; system errors&quot;]" />
                        <ui:ForEach x:TypeArguments="ui:QueueItem" CurrentIndex="{x:Null}" DisplayName="For Each SystemError" sap2010:WorkflowViewState.IdRef="ForEach`1_11" Values="[systemErrorItems]">
                          <ui:ForEach.Body>
                            <ActivityAction x:TypeArguments="ui:QueueItem">
                              <ActivityAction.Argument>
                                <DelegateInArgument x:TypeArguments="ui:QueueItem" Name="item" />
                              </ActivityAction.Argument>
                              <Sequence DisplayName="ProcessingException" sap2010:WorkflowViewState.IdRef="Sequence_47">
                                <Sequence.Variables>
                                  <Variable x:TypeArguments="s:String[]" Name="formatted" />
                                </Sequence.Variables>
                                <If Condition="[item.ProcessingException.Reason.Contains(vbNewLine) And item.ProcessingException.Reason.Contains(vbTab)]" DisplayName="If formatted" sap2010:WorkflowViewState.IdRef="If_40">
                                  <If.Then>
                                    <Assign DisplayName="Assign formatted" sap2010:WorkflowViewState.IdRef="Assign_103">
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="s:String[]">[formatted]</OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="s:String[]">[item.ProcessingException.Reason.Split((vbNewLine + vbTab).ToCharArray)]</InArgument>
                                      </Assign.Value>
                                    </Assign>
                                  </If.Then>
                                  <If.Else>
                                    <Assign DisplayName="Assign no format" sap2010:WorkflowViewState.IdRef="Assign_104">
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="s:String[]">[formatted]</OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="s:String[]">[{"", item.ProcessingException.Reason, item.ProcessingException.Details}]</InArgument>
                                      </Assign.Value>
                                    </Assign>
                                  </If.Else>
                                </If>
                                <AddToCollection x:TypeArguments="x:String" Collection="[tableRows]" DisplayName="Add To SystemError" sap2010:WorkflowViewState.IdRef="AddToCollection`1_11" Item="[String.Format(TemplateSections(&quot;TableRows&quot;), item.Reference, formatted(0), formatted(1), String.Join(vbNewLine, formatted.Skip(2)))]" />
                              </Sequence>
                            </ActivityAction>
                          </ui:ForEach.Body>
                        </ui:ForEach>
                        <Assign DisplayName="Assign SystemError" sap2010:WorkflowViewState.IdRef="Assign_105">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[HtmlReportMessage]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String" xml:space="preserve">[HtmlReportMessage.
Replace("{SystemError}", TemplateSections("SystemError")).
Replace("{TableRows}", String.Join("", tableRows)).
Replace("{E}", If(systemErrorItems.Count &lt;&gt; 1, "s", "")).
Replace("{ALSO}", If(both, "also ", ""))]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </If.Then>
                    <If.Else>
                      <Assign DisplayName="Assign no SystemError" sap2010:WorkflowViewState.IdRef="Assign_106">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[HtmlReportMessage]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String" xml:space="preserve">[HtmlReportMessage.
Replace("{SystemError}", "")]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Else>
                  </If>
                </Sequence>
              </If.Then>
              <If.Else>
                <Assign DisplayName="Assign none Failed" sap2010:WorkflowViewState.IdRef="Assign_28">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[HtmlReportMessage]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String" xml:space="preserve">[HtmlReportMessage.
Replace("{FailureMessage}", "")]</InArgument>
                  </Assign.Value>
                </Assign>
              </If.Else>
            </If>
            <Sequence DisplayName="Build html message" sap2010:WorkflowViewState.IdRef="Sequence_22">
              <Sequence.Variables>
                <Variable x:TypeArguments="x:String" Name="timestamp" />
                <Variable x:TypeArguments="x:String" Name="logo">
                  <Variable.Default>
                    <Literal x:TypeArguments="x:String" Value="" />
                  </Variable.Default>
                </Variable>
              </Sequence.Variables>
              <Assign DisplayName="Assign timestamp" sap2010:WorkflowViewState.IdRef="Assign_44">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[timestamp]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[Now.ToString("hh:mm:ss tt")]</InArgument>
                </Assign.Value>
              </Assign>
              <If Condition="[in_HtmlLogo IsNot Nothing]" DisplayName="If HtmlLogo defined" sap2010:WorkflowViewState.IdRef="If_32">
                <If.Then>
                  <Sequence DisplayName="Add HtmlLogo image" sap2010:WorkflowViewState.IdRef="Sequence_35">
                    <If Condition="[File.Exists(Path.GetFullPath(in_HtmlLogo))]" DisplayName="If HtmlLogo exists" sap2010:WorkflowViewState.IdRef="If_33">
                      <If.Then>
                        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_36">
                          <Sequence.Variables>
                            <Variable x:TypeArguments="s:Byte[]" Name="bytes" />
                          </Sequence.Variables>
                          <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_13" Level="Trace" Message="[&quot;Adding logo from &quot; + Path.GetFileName(in_HtmlLogo)]" />
                          <Assign DisplayName="Assign bytes" sap2010:WorkflowViewState.IdRef="Assign_77">
                            <Assign.To>
                              <OutArgument x:TypeArguments="s:Byte[]">[bytes]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="s:Byte[]">[File.ReadAllBytes(in_HtmlLogo)]</InArgument>
                            </Assign.Value>
                          </Assign>
                          <Assign DisplayName="Assign base64" sap2010:WorkflowViewState.IdRef="Assign_78">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:String">[in_HtmlLogo]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:String">[Convert.ToBase64String(bytes, Base64FormattingOptions.InsertLineBreaks)]</InArgument>
                            </Assign.Value>
                          </Assign>
                        </Sequence>
                      </If.Then>
                      <If.Else>
                        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_37">
                          <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_14" Level="Trace" Message="[&quot;Adding &quot; &amp; in_HtmlLogo.Length &amp; &quot; base64 characters as logo&quot;]" />
                          <Assign DisplayName="Assign default" sap2010:WorkflowViewState.IdRef="Assign_79">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:String">[in_HtmlLogo]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:String">[in_HtmlLogo]</InArgument>
                            </Assign.Value>
                          </Assign>
                        </Sequence>
                      </If.Else>
                    </If>
                    <Assign DisplayName="Assign HtmlLogo" sap2010:WorkflowViewState.IdRef="Assign_46">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[in_HtmlLogo]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String" xml:space="preserve">[TemplateSections("HtmlLogo").
Replace("{IMAGE}", in_HtmlLogo)]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </Sequence>
                </If.Then>
              </If>
              <Assign DisplayName="Assign message body" sap2010:WorkflowViewState.IdRef="Assign_48">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[HtmlReportMessage]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String" xml:space="preserve">[HtmlReportMessage.
Replace("{Timestamp}", timestamp).
Replace("{ProcessName}", in_ProcessName).
Replace("{HtmlLogo}", in_HtmlLogo).
Replace("{TransactionItem}", in_TransactionItem)]</InArgument>
                </Assign.Value>
              </Assign>
            </Sequence>
          </Sequence>
          <FlowStep.Next>
            <FlowStep x:Name="__ReferenceID1" sap2010:WorkflowViewState.IdRef="FlowStep_2">
              <Sequence DisplayName="Send email report" sap2010:WorkflowViewState.IdRef="Sequence_49">
                <Sequence.Variables>
                  <Variable x:TypeArguments="x:String" Name="subject" />
                  <Variable x:TypeArguments="scg:List(x:String)" Default="[New List(Of String)]" Name="attachments" />
                  <Variable x:TypeArguments="x:String" Name="username" />
                  <Variable x:TypeArguments="x:String" Name="password" />
                </Sequence.Variables>
                <If Condition="[in_TransactionData.Any(Function(qi) qi.Status = QueueItemStatus.Failed)]" DisplayName="If none failed" sap2010:WorkflowViewState.IdRef="If_5">
                  <If.Then>
                    <Assign DisplayName="Assign failed items" sap2010:WorkflowViewState.IdRef="Assign_4">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[subject]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[in_ProcessName + " found errors processing"]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </If.Then>
                  <If.Else>
                    <Assign DisplayName="Assign none failed" sap2010:WorkflowViewState.IdRef="Assign_108">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[subject]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[in_ProcessName + " finished processing"]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </If.Else>
                </If>
                <If Condition="[Directory.Exists(&quot;Exceptions_Screenshots&quot;)]" DisplayName="If exceptions folder exists" sap2010:WorkflowViewState.IdRef="If_6">
                  <If.Then>
                    <Sequence DisplayName="Get attachment screenshots" sap2010:WorkflowViewState.IdRef="Sequence_7">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="s:String[]" Name="files" />
                      </Sequence.Variables>
                      <Assign DisplayName="Assign exception files" sap2010:WorkflowViewState.IdRef="Assign_6">
                        <Assign.To>
                          <OutArgument x:TypeArguments="s:String[]">[files]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="s:String[]">[Directory.GetFiles("Exceptions_Screenshots")]</InArgument>
                        </Assign.Value>
                      </Assign>
                      <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_7" Level="Trace" Message="[&quot;Found &quot; &amp; files.Length &amp; &quot; in Exceptions_Screenshots folder&quot;]" />
                      <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="For Each Exception Screenshot" sap2010:WorkflowViewState.IdRef="ForEach`1_3" Values="[files]">
                        <ui:ForEach.Body>
                          <ActivityAction x:TypeArguments="x:String">
                            <ActivityAction.Argument>
                              <DelegateInArgument x:TypeArguments="x:String" Name="item" />
                            </ActivityAction.Argument>
                            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_9">
                              <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_9" Level="Trace" Message="[&quot;Attaching &quot; + Path.GetFileName(item)]" />
                              <AddToCollection x:TypeArguments="x:String" Collection="[attachments]" DisplayName="Add Screenshot To Attachments" sap2010:WorkflowViewState.IdRef="AddToCollection`1_6" Item="[Path.GetFullPath(item)]" />
                              <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_10" Level="Trace" Message="[&quot;Attachments size is &quot; &amp; attachments.Sum(Function(a) New FileInfo(a).Length)]" />
                              <If Condition="[attachments.Sum(Function(a) New FileInfo(a).Length) &gt; 25000000]" DisplayName="If file length over limit" sap2010:WorkflowViewState.IdRef="If_7">
                                <If.Then>
                                  <Sequence DisplayName="Reduce size below limit and exit" sap2010:WorkflowViewState.IdRef="Sequence_6">
                                    <RemoveFromCollection x:TypeArguments="x:String" Collection="[attachments]" DisplayName="Remove Last Attachment" sap2010:WorkflowViewState.IdRef="RemoveFromCollection`1_1" Item="[attachments.Last]" />
                                    <ui:Break sap2010:WorkflowViewState.IdRef="Break_1" />
                                  </Sequence>
                                </If.Then>
                              </If>
                            </Sequence>
                          </ActivityAction>
                        </ui:ForEach.Body>
                      </ui:ForEach>
                      <If Condition="[attachments.Count &lt;&gt; files.Count]" DisplayName="If any screenshots not added" sap2010:WorkflowViewState.IdRef="If_43">
                        <If.Then>
                          <Assign DisplayName="Assign IssuesReporting" sap2010:WorkflowViewState.IdRef="Assign_109">
                            <Assign.To>
                              <OutArgument x:TypeArguments="s:Exception">[out_IssuesReporting]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="s:InsufficientMemoryException">[New System.InsufficientMemoryException("Couldn't attach " &amp; (files.Count - attachments.Count) &amp; " screenshots within the maximum email size")]</InArgument>
                            </Assign.Value>
                          </Assign>
                        </If.Then>
                      </If>
                    </Sequence>
                  </If.Then>
                  <If.Else>
                    <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_8" Level="Trace" Message="[&quot;Couldn't find Exceptions_Screenshots folder&quot;]" />
                  </If.Else>
                </If>
                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke GetAppCredentials workflow" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="Framework\GetAppCredentials.xaml">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="in_Domain" />
                    <InArgument x:TypeArguments="x:String" x:Key="in_Host">uq.edu.au</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_Credential">[in_EmailCredentials]</InArgument>
                    <OutArgument x:TypeArguments="x:String" x:Key="out_Username">[username]</OutArgument>
                    <OutArgument x:TypeArguments="ss:SecureString" x:Key="out_Password" />
                    <OutArgument x:TypeArguments="x:String" x:Key="out_Plaintext">[password]</OutArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                </ui:InvokeWorkflowFile>
                <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_18" Level="Trace" Message="[&quot;Sending report as &quot; + username]" />
                <While DisplayName="While sending hasn't reached max timespan" sap2010:WorkflowViewState.IdRef="While_1">
                  <While.Variables>
                    <Variable x:TypeArguments="x:Boolean" Default="True" Name="sending" />
                    <Variable x:TypeArguments="x:Int32" Default="60000" Name="timeout" />
                  </While.Variables>
                  <While.Condition>[sending]</While.Condition>
                  <TryCatch DisplayName="Try Catch" sap2010:WorkflowViewState.IdRef="TryCatch_1">
                    <TryCatch.Try>
                      <Sequence sap2010:WorkflowViewState.IdRef="Sequence_11">
                        <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_20" Level="Trace" Message="[&quot;Sending &quot; + subject + &quot; to &quot; + in_EmailRecipients]" />
                        <ui:SendExchangeMail Bcc="{x:Null}" Cc="{x:Null}" Domain="{x:Null}" From="{x:Null}" MailMessage="{x:Null}" Server="{x:Null}" AttachmentsCollection="[attachments]" Body="[HtmlReportMessage]" DisplayName="Send Exchange Mail Message" EmailAutodiscover="[username]" ExchangeVersion="Exchange2007_SP1" sap2010:WorkflowViewState.IdRef="SendExchangeMail_1" IsBodyHtml="True" IsDraft="False" Name="Minion" Password="[password]" SaveCopy="False" Subject="[subject]" TimeoutMS="[timeout]" To="[in_EmailRecipients]" User="[username]" />
                        <Assign DisplayName="Assign sent" sap2010:WorkflowViewState.IdRef="Assign_8">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Boolean">[sending]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </TryCatch.Try>
                    <TryCatch.Catches>
                      <Catch x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="Catch`1_1">
                        <ActivityAction x:TypeArguments="s:Exception">
                          <ActivityAction.Argument>
                            <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                          </ActivityAction.Argument>
                          <Sequence sap2010:WorkflowViewState.IdRef="Sequence_10">
                            <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_11" Level="Error" Message="[exception.Message]" />
                            <Assign DisplayName="Increment timeout" sap2010:WorkflowViewState.IdRef="Assign_7">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Int32">[timeout]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Int32">[timeout + 120000]</InArgument>
                              </Assign.Value>
                            </Assign>
                          </Sequence>
                        </ActivityAction>
                      </Catch>
                    </TryCatch.Catches>
                    <TryCatch.Finally>
                      <If Condition="[timeout &gt; in_EmailTimeout And sending]" DisplayName="If not sent after timeout" sap2010:WorkflowViewState.IdRef="If_44">
                        <If.Then>
                          <Sequence sap2010:WorkflowViewState.IdRef="Sequence_50">
                            <Assign DisplayName="Assign exit" sap2010:WorkflowViewState.IdRef="Assign_113">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Boolean">[sending]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                              </Assign.Value>
                            </Assign>
                            <Assign DisplayName="Assign email error" sap2010:WorkflowViewState.IdRef="Assign_114">
                              <Assign.To>
                                <OutArgument x:TypeArguments="s:Exception">[out_IssuesReporting]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="s:SystemException" xml:space="preserve">[New System.SystemException("Email was not sent  to " + in_EmailRecipients + "after 3 tries")]</InArgument>
                              </Assign.Value>
                            </Assign>
                          </Sequence>
                        </If.Then>
                      </If>
                    </TryCatch.Finally>
                  </TryCatch>
                </While>
                <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="For Each Attachment" sap2010:WorkflowViewState.IdRef="ForEach`1_12" Values="[attachments]">
                  <ui:ForEach.Body>
                    <ActivityAction x:TypeArguments="x:String">
                      <ActivityAction.Argument>
                        <DelegateInArgument x:TypeArguments="x:String" Name="item" />
                      </ActivityAction.Argument>
                      <ui:Delete ContinueOnError="{x:Null}" DisplayName="Delete exception screenshots" sap2010:WorkflowViewState.IdRef="Delete_3" Path="[item]" />
                    </ActivityAction>
                  </ui:ForEach.Body>
                </ui:ForEach>
              </Sequence>
            </FlowStep>
          </FlowStep.Next>
        </FlowStep>
      </Flowchart.StartNode>
      <x:Reference>__ReferenceID0</x:Reference>
      <x:Reference>__ReferenceID1</x:Reference>
      <FlowStep sap2010:WorkflowViewState.IdRef="FlowStep_3">
        <ui:WriteTextFile DisplayName="Write Text File" FileName="debug.html" sap2010:WorkflowViewState.IdRef="WriteTextFile_1" Text="[HtmlReportMessage]" />
      </FlowStep>
    </Flowchart>
    <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Info" Message="[&quot;End SendJobReport.xaml, send to &quot; + in_EmailRecipients]" />
    <sads:DebugSymbol.Symbol>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</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="SetTransactionStatus_1" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="GetQueueItems_1" sap:VirtualizedContainerService.HintSize="242,22" />
      <sap2010:ViewStateData Id="Assign_5" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Sequence_4" sap:VirtualizedContainerService.HintSize="264,308">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="CommentOut_2" sap:VirtualizedContainerService.HintSize="614,386" />
      <sap2010:ViewStateData Id="Assign_60" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_19" sap:VirtualizedContainerService.HintSize="634,208" />
      <sap2010:ViewStateData Id="Assign_59" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_49" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_17" sap:VirtualizedContainerService.HintSize="509,208" />
      <sap2010:ViewStateData Id="If_18" sap:VirtualizedContainerService.HintSize="634,356" />
      <sap2010:ViewStateData Id="Assign_81" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_82" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_35" sap:VirtualizedContainerService.HintSize="509,208" />
      <sap2010:ViewStateData Id="If_36" sap:VirtualizedContainerService.HintSize="634,356" />
      <sap2010:ViewStateData Id="Assign_61" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_62" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_20" sap:VirtualizedContainerService.HintSize="509,208" />
      <sap2010:ViewStateData Id="If_21" sap:VirtualizedContainerService.HintSize="634,356" />
      <sap2010:ViewStateData Id="Assign_63" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_22" sap:VirtualizedContainerService.HintSize="634,208" />
      <sap2010:ViewStateData Id="Assign_65" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_66" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_24" sap:VirtualizedContainerService.HintSize="509,208" />
      <sap2010:ViewStateData Id="If_25" sap:VirtualizedContainerService.HintSize="634,356" />
      <sap2010:ViewStateData Id="Assign_67" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_26" sap:VirtualizedContainerService.HintSize="634,208" />
      <sap2010:ViewStateData Id="Assign_111" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_45" sap:VirtualizedContainerService.HintSize="634,208" />
      <sap2010:ViewStateData Id="Assign_112" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_46" sap:VirtualizedContainerService.HintSize="634,208">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_28" sap:VirtualizedContainerService.HintSize="614,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LogMessage_1" sap:VirtualizedContainerService.HintSize="614,91" />
      <sap2010:ViewStateData Id="Assign_9" sap:VirtualizedContainerService.HintSize="547,60" />
      <sap2010:ViewStateData Id="Assign_10" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_11" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Sequence_12" sap:VirtualizedContainerService.HintSize="264,284">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_12" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_9" sap:VirtualizedContainerService.HintSize="531,432" />
      <sap2010:ViewStateData Id="ForEach`1_6" sap:VirtualizedContainerService.HintSize="547,566">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LogMessage_12" sap:VirtualizedContainerService.HintSize="547,91" />
      <sap2010:ViewStateData Id="Assign_92" sap:VirtualizedContainerService.HintSize="547,60" />
      <sap2010:ViewStateData Id="Sequence_13" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_84" sap:VirtualizedContainerService.HintSize="314,60" />
      <sap2010:ViewStateData Id="LogMessage_4" sap:VirtualizedContainerService.HintSize="314,91" />
      <sap2010:ViewStateData Id="Assign_94" sap:VirtualizedContainerService.HintSize="314,60" />
      <sap2010:ViewStateData Id="Assign_87" sap:VirtualizedContainerService.HintSize="314,64" />
      <sap2010:ViewStateData Id="Sequence_40" sap:VirtualizedContainerService.HintSize="336,519">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_16" sap:VirtualizedContainerService.HintSize="242,64" />
      <sap2010:ViewStateData Id="If_10" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_95" sap:VirtualizedContainerService.HintSize="314,60" />
      <sap2010:ViewStateData Id="LogMessage_15" sap:VirtualizedContainerService.HintSize="314,91" />
      <sap2010:ViewStateData Id="Assign_27" sap:VirtualizedContainerService.HintSize="314,64" />
      <sap2010:ViewStateData Id="Assign_107" sap:VirtualizedContainerService.HintSize="547,60" />
      <sap2010:ViewStateData Id="Assign_98" sap:VirtualizedContainerService.HintSize="547,60" />
      <sap2010:ViewStateData Id="LogMessage_16" sap:VirtualizedContainerService.HintSize="547,91" />
      <sap2010:ViewStateData Id="Assign_100" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_101" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_39" sap:VirtualizedContainerService.HintSize="509,208" />
      <sap2010:ViewStateData Id="AddToCollection`1_10" sap:VirtualizedContainerService.HintSize="509,22" />
      <sap2010:ViewStateData Id="Sequence_46" sap:VirtualizedContainerService.HintSize="531,394">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ForEach`1_10" sap:VirtualizedContainerService.HintSize="547,528" />
      <sap2010:ViewStateData Id="Assign_96" sap:VirtualizedContainerService.HintSize="547,64" />
      <sap2010:ViewStateData Id="Sequence_45" sap:VirtualizedContainerService.HintSize="569,1087">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_97" sap:VirtualizedContainerService.HintSize="242,64" />
      <sap2010:ViewStateData Id="If_14" sap:VirtualizedContainerService.HintSize="314,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_102" sap:VirtualizedContainerService.HintSize="547,60" />
      <sap2010:ViewStateData Id="LogMessage_17" sap:VirtualizedContainerService.HintSize="547,91" />
      <sap2010:ViewStateData Id="Assign_103" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_104" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_40" sap:VirtualizedContainerService.HintSize="509,208" />
      <sap2010:ViewStateData Id="AddToCollection`1_11" sap:VirtualizedContainerService.HintSize="509,22" />
      <sap2010:ViewStateData Id="Sequence_47" sap:VirtualizedContainerService.HintSize="531,394">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ForEach`1_11" sap:VirtualizedContainerService.HintSize="547,528" />
      <sap2010:ViewStateData Id="Assign_105" sap:VirtualizedContainerService.HintSize="547,64" />
      <sap2010:ViewStateData Id="Sequence_48" sap:VirtualizedContainerService.HintSize="569,987">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_106" sap:VirtualizedContainerService.HintSize="242,64" />
      <sap2010:ViewStateData Id="If_41" sap:VirtualizedContainerService.HintSize="314,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_44" sap:VirtualizedContainerService.HintSize="336,601">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_28" sap:VirtualizedContainerService.HintSize="242,64" />
      <sap2010:ViewStateData Id="If_12" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_44" sap:VirtualizedContainerService.HintSize="844,60" />
      <sap2010:ViewStateData Id="LogMessage_13" sap:VirtualizedContainerService.HintSize="314,91" />
      <sap2010:ViewStateData Id="Assign_77" sap:VirtualizedContainerService.HintSize="314,60" />
      <sap2010:ViewStateData Id="Assign_78" sap:VirtualizedContainerService.HintSize="314,60" />
      <sap2010:ViewStateData Id="Sequence_36" sap:VirtualizedContainerService.HintSize="336,415">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LogMessage_14" sap:VirtualizedContainerService.HintSize="314,91" />
      <sap2010:ViewStateData Id="Assign_79" sap:VirtualizedContainerService.HintSize="314,60" />
      <sap2010:ViewStateData Id="Sequence_37" sap:VirtualizedContainerService.HintSize="336,315">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_33" sap:VirtualizedContainerService.HintSize="697,563" />
      <sap2010:ViewStateData Id="Assign_46" sap:VirtualizedContainerService.HintSize="697,64" />
      <sap2010:ViewStateData Id="Sequence_35" sap:VirtualizedContainerService.HintSize="719,791">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_32" sap:VirtualizedContainerService.HintSize="844,939" />
      <sap2010:ViewStateData Id="Assign_48" sap:VirtualizedContainerService.HintSize="844,64" />
      <sap2010:ViewStateData Id="Sequence_22" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_53" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_4" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_108" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_5" sap:VirtualizedContainerService.HintSize="509,208" />
      <sap2010:ViewStateData Id="Assign_6" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="LogMessage_7" sap:VirtualizedContainerService.HintSize="464,91" />
      <sap2010:ViewStateData Id="LogMessage_9" sap:VirtualizedContainerService.HintSize="464,91" />
      <sap2010:ViewStateData Id="AddToCollection`1_6" sap:VirtualizedContainerService.HintSize="464,22" />
      <sap2010:ViewStateData Id="LogMessage_10" sap:VirtualizedContainerService.HintSize="464,91" />
      <sap2010:ViewStateData Id="RemoveFromCollection`1_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Break_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Sequence_6" sap:VirtualizedContainerService.HintSize="222,208">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_7" sap:VirtualizedContainerService.HintSize="464,356" />
      <sap2010:ViewStateData Id="Sequence_9" sap:VirtualizedContainerService.HintSize="486,804">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ForEach`1_3" sap:VirtualizedContainerService.HintSize="464,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_109" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_43" sap:VirtualizedContainerService.HintSize="464,208" />
      <sap2010:ViewStateData Id="Sequence_7" sap:VirtualizedContainerService.HintSize="486,654">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LogMessage_8" sap:VirtualizedContainerService.HintSize="314,91" />
      <sap2010:ViewStateData Id="If_6" sap:VirtualizedContainerService.HintSize="509,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="InvokeWorkflowFile_1" sap:VirtualizedContainerService.HintSize="509,87" />
      <sap2010:ViewStateData Id="LogMessage_18" sap:VirtualizedContainerService.HintSize="509,91" />
      <sap2010:ViewStateData Id="LogMessage_20" sap:VirtualizedContainerService.HintSize="314,91" />
      <sap2010:ViewStateData Id="SendExchangeMail_1" sap:VirtualizedContainerService.HintSize="314,145" />
      <sap2010:ViewStateData Id="Assign_8" sap:VirtualizedContainerService.HintSize="314,60" />
      <sap2010:ViewStateData Id="Sequence_11" sap:VirtualizedContainerService.HintSize="336,500">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LogMessage_11" sap:VirtualizedContainerService.HintSize="314,91" />
      <sap2010:ViewStateData Id="Assign_7" sap:VirtualizedContainerService.HintSize="314,60" />
      <sap2010:ViewStateData Id="Sequence_10" sap:VirtualizedContainerService.HintSize="336,315">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Catch`1_1" sap:VirtualizedContainerService.HintSize="404,21">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_113" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_114" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Sequence_50" sap:VirtualizedContainerService.HintSize="264,284">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_44" sap:VirtualizedContainerService.HintSize="464,432" />
      <sap2010:ViewStateData Id="TryCatch_1" sap:VirtualizedContainerService.HintSize="418,727" />
      <sap2010:ViewStateData Id="While_1" sap:VirtualizedContainerService.HintSize="509,885">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Delete_3" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="ForEach`1_12" sap:VirtualizedContainerService.HintSize="509,194" />
      <sap2010:ViewStateData Id="Sequence_49" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="FlowStep_2">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <av:Point x:Key="ShapeLocation">190,284.5</av:Point>
            <av:Size x:Key="ShapeSize">200,51</av:Size>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="FlowStep_1">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <av:Point x:Key="ShapeLocation">190,184.5</av:Point>
            <av:Size x:Key="ShapeSize">200,51</av:Size>
            <av:PointCollection x:Key="ConnectorLocation">290,235.5 290,284.5</av:PointCollection>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="WriteTextFile_1" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="FlowStep_3">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <av:Point x:Key="ShapeLocation">190,384.5</av:Point>
            <av:Size x:Key="ShapeSize">200,51</av:Size>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Flowchart_1" sap:VirtualizedContainerService.HintSize="614,636">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
            <av:Point x:Key="ShapeLocation">270,2.5</av:Point>
            <av:Size x:Key="ShapeSize">60,75</av:Size>
            <av:PointCollection x:Key="ConnectorLocation">300,77.5 300,107.5 290,107.5 290,184.5</av:PointCollection>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LogMessage_2" sap:VirtualizedContainerService.HintSize="614,91" />
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="636,2121">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="SendJobReport_1" sap:VirtualizedContainerService.HintSize="676,2201" />
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>