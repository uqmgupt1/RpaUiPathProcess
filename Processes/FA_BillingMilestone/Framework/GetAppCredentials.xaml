<Activity mc:Ignorable="sap sap2010 sads" x:Class="GetCredentials" this:GetCredentials.in_Credential="TestRobot-Credential"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities"
 xmlns:s="clr-namespace:System;assembly=mscorlib"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:ss="clr-namespace:System.Security;assembly=mscorlib"
 xmlns:this="clr-namespace:"
 xmlns:ui="http://schemas.uipath.com/workflow/activities"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="opt_Domain" Type="InArgument(x:String)" />
    <x:Property Name="in_Credential" Type="InArgument(x:String)" />
    <x:Property Name="opt_Host" Type="InArgument(x:String)" />
    <x:Property Name="out_Username" Type="OutArgument(x:String)" />
    <x:Property Name="out_Password" Type="OutArgument(ss:SecureString)" />
    <x:Property Name="out_Plaintext" Type="OutArgument(x:String)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>GetCredentials_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Security</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Net</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>TimeSpan2</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <TryCatch sap2010:Annotation.AnnotationText="Description: Change in_Credential to a previously created Orchestrator asset or a Windows credential, set opt_Domain as a prefix seperated from out_Username by '\' or opt_Host as a suffix seperated from out_Username by '@'; and use outputs out_Username and out_Password or out_Plaintext. This workflow securely fetches or creates and uses a set of credentials defined at it's input. It first tries to fetch them from Orchestrator. Failing that, it tries to fetch them from the Windows credential manager. If they do not exist, it creates them and then outputs them. &#xA;&#xA;Inputs:&#xA;opt_Domain &lt;String&gt;: Optional machine name prefix&#xA;opt_Host &lt;String&gt;: Optional email address suffix&#xA;in_Credential &lt;String&gt;: Orchestrator asset name&#xA;&#xA;Outputs:&#xA;out_Username &lt;String&gt;: Username&#xA;out_Password &lt;SecureString&gt;: Secure string version of password&#xA;out_Plaintext &lt;String&gt;: String version of password&#xA;&#xA;Pre Condition: NA&#xA;Post Condition: NA" DisplayName="Private: Try Get Credential Asset" sap2010:WorkflowViewState.IdRef="TryCatch_2">
    <TryCatch.Variables>
      <Variable x:TypeArguments="x:String" Name="stringPassword" />
    </TryCatch.Variables>
    <TryCatch.Try>
      <Sequence sap2010:WorkflowViewState.IdRef="Sequence_9">
        <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Trace" Message="[&quot;Start GetAppCredentials.xaml, getting &quot; + in_Credential]" />
        <ui:GetRobotCredential TimeoutMS="{x:Null}" AssetName="[in_Credential]" DisplayName="Get Orchestrator Credential" sap2010:WorkflowViewState.IdRef="GetRobotCredential_2" Password="[out_Password]" Username="[out_Username]" />
      </Sequence>
    </TryCatch.Try>
    <TryCatch.Catches>
      <Catch x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="Catch`1_2">
        <ActivityAction x:TypeArguments="s:Exception">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
          </ActivityAction.Argument>
          <If Condition="[out_Username is Nothing or out_Password is Nothing]" DisplayName="Private: Fetch local" sap2010:WorkflowViewState.IdRef="If_4">
            <If.Then>
              <Sequence DisplayName="Private: Get from Credential Store" sap2010:WorkflowViewState.IdRef="Sequence_6">
                <Sequence.Variables>
                  <Variable x:TypeArguments="x:Boolean" Name="credentialFound" />
                </Sequence.Variables>
                <ui:GetSecureCredential CredentialType="Generic" DisplayName="Get secure credential" sap2010:WorkflowViewState.IdRef="GetSecureCredential_1" Password="[out_Password]" PersistanceType="Enterprise" Result="[credentialFound]" Target="[in_Credential]" Username="[out_Username]" />
                <If Condition="[credentialFound]" DisplayName="If locally found" sap2010:WorkflowViewState.IdRef="If_3">
                  <If.Else>
                    <Sequence DisplayName="Private: Request and Store Credentials" sap2010:WorkflowViewState.IdRef="Sequence_5">
                      <ui:RequestCredential DisplayName="Request Credential" sap2010:WorkflowViewState.IdRef="RequestCredential_2" Message="[&quot;Please provide &quot;&quot;&quot; + in_Credential + &quot;&quot;&quot; access credentials&quot;]" Password="[out_Plaintext]" Result="[credentialFound]" Title="Hello! This is Robot" Username="[out_Username]" />
                      <If Condition="[Not credentialFound]" DisplayName="If cancelled" sap2010:WorkflowViewState.IdRef="If_5">
                        <If.Then>
                          <Throw DisplayName="Throw No Credentials" Exception="[new Exception(&quot;Credentials not supplied&quot;)]" sap2010:WorkflowViewState.IdRef="Throw_1" />
                        </If.Then>
                        <If.Else>
                          <ui:AddCredential CredentialType="Generic" DisplayName="Add Credential" sap2010:WorkflowViewState.IdRef="AddCredential_2" Password="[out_Plaintext]" PersistanceType="Enterprise" Target="[in_Credential]" Username="[out_Username]" />
                        </If.Else>
                      </If>
                      <Assign DisplayName="Private: Make Secure Password" sap2010:WorkflowViewState.IdRef="Assign_15">
                        <Assign.To>
                          <OutArgument x:TypeArguments="ss:SecureString">[out_Password]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="ss:SecureString">[New NetworkCredential(out_Username, out_Plaintext).SecurePassword]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                  </If.Else>
                </If>
              </Sequence>
            </If.Then>
          </If>
        </ActivityAction>
      </Catch>
    </TryCatch.Catches>
    <TryCatch.Finally>
      <Sequence DisplayName="Private: Return" sap2010:WorkflowViewState.IdRef="Sequence_8">
        <Assign DisplayName="Private: Assign plaintext for activities" sap2010:WorkflowViewState.IdRef="Assign_16">
          <Assign.To>
            <OutArgument x:TypeArguments="x:String">[out_Plaintext]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:String">[New System.Net.NetworkCredential(out_Username, out_Password).Password]</InArgument>
          </Assign.Value>
        </Assign>
        <If Condition="[opt_Domain IsNot Nothing]" DisplayName="If domain specified" sap2010:WorkflowViewState.IdRef="If_10">
          <If.Then>
            <Assign DisplayName="Assign domain name" sap2010:WorkflowViewState.IdRef="Assign_22">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[out_Username]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[opt_Domain + "\" + out_Username]</InArgument>
              </Assign.Value>
            </Assign>
          </If.Then>
        </If>
        <If Condition="[opt_Host IsNot Nothing]" DisplayName="If host specified" sap2010:WorkflowViewState.IdRef="If_11">
          <If.Then>
            <Assign DisplayName="Assign host address" sap2010:WorkflowViewState.IdRef="Assign_23">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[out_Username]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[out_Username + "@" + opt_Host]</InArgument>
              </Assign.Value>
            </Assign>
          </If.Then>
        </If>
      </Sequence>
    </TryCatch.Finally>
    <sads:DebugSymbol.Symbol>d1lDOlxVaVBhdGhcUnBhVWlQYXRoUHJvY2Vzc1xQcm9jZXNzZXNcRkFfQmlsbGluZ01pbGVzdG9uZVxGcmFtZXdvcmtcR2V0QXBwQ3JlZGVudGlhbHMueGFtbDMBZgF7AQJOA6cBDgIBAVMHVhICAUeDAQekARICAS5eC34QAgECVAlUwAECAU9VCVXoAQIBSIQBCYsBEgIBQYwBCZcBDgIBOJgBCaMBDgIBL14ZXk8CAQNgD3waAgEGVHdUvQECAVBVP1VQAgFNVdUBVeUBAgFLVbsBVcsBAgFJiQE0iQF7AgFEhgE1hgFEAgFCjAEXjAEzAgE5jgENlQEWAgE7mAEXmAExAgEwmgENoQEWAgEyZBFkpQICASVlEXsWAgEHkwE4kwFZAgE+kAE5kAFHAgE8nwE4nwFXAgE1nAE5nAFHAgEzZPcBZIgCAgEsZJICZKICAgEqZNwBZO8BAgEoZKcBZLcBAgEmZR9lMgIBCGcVeSACAQpoF2jlAgIBG2kXcBwCAQ9xF3ggAgELaIwBaPUBAgEjaNICaOICAgEhaJgCaKsCAgEfaLICaMgCAgEeaP8BaJACAgEcaSVpPAIBEGsba7MBAgEZbhtuggICARJ2SXaMAQIBDnNKc1gCAQxrT2uGAQIBGm7UAW7lAQIBF27vAW7/AQIBFW6eAW6vAQIBEw==</sads:DebugSymbol.Symbol>
  </TryCatch>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="LogMessage_1" sap:VirtualizedContainerService.HintSize="314,91" />
      <sap2010:ViewStateData Id="GetRobotCredential_2" sap:VirtualizedContainerService.HintSize="314,22" />
      <sap2010:ViewStateData Id="Sequence_9" sap:VirtualizedContainerService.HintSize="336,277">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetSecureCredential_1" sap:VirtualizedContainerService.HintSize="611,22" />
      <sap2010:ViewStateData Id="RequestCredential_2" sap:VirtualizedContainerService.HintSize="464,22" />
      <sap2010:ViewStateData Id="Throw_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="AddCredential_2" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_5" sap:VirtualizedContainerService.HintSize="464,208" />
      <sap2010:ViewStateData Id="Assign_15" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Sequence_5" sap:VirtualizedContainerService.HintSize="486,494">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_3" sap:VirtualizedContainerService.HintSize="611,642" />
      <sap2010:ViewStateData Id="Sequence_6" sap:VirtualizedContainerService.HintSize="633,828">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_4" sap:VirtualizedContainerService.HintSize="758,976" />
      <sap2010:ViewStateData Id="Catch`1_2" sap:VirtualizedContainerService.HintSize="490,21">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_16" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="Assign_22" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_10" sap:VirtualizedContainerService.HintSize="464,208" />
      <sap2010:ViewStateData Id="Assign_23" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_11" sap:VirtualizedContainerService.HintSize="464,208" />
      <sap2010:ViewStateData Id="Sequence_8" sap:VirtualizedContainerService.HintSize="486,680">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="TryCatch_2" sap:VirtualizedContainerService.HintSize="504,1219">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetCredentials_1" sap:VirtualizedContainerService.HintSize="544,1299" />
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>