<Activity mc:Ignorable="sap sap2010 sads" x:Class="Main"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:ss="clr-namespace:System.Security;assembly=mscorlib"
 xmlns:ui="http://schemas.uipath.com/workflow/activities"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_Credentials" Type="InArgument(x:String)" />
    <x:Property Name="in_MappedDrive" Type="InArgument(x:String)" />
    <x:Property Name="out_DriveLetter" Type="OutArgument(x:String)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>Main_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Security.Principal</x:String>
      <x:String>System.DirectoryServices.AccountManagement</x:String>
      <x:String>Microsoft.IdentityModel.Clients.ActiveDirectory</x:String>
      <x:String>System.Net</x:String>
      <x:String>SimpleImpersonation</x:String>
      <x:String>Dapplo.Windows.Advapi32</x:String>
      <x:String>PInvoke</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.Security</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Plugin.Workflow</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>System.DirectoryServices.AccountManagement</AssemblyReference>
      <AssemblyReference>Microsoft.IdentityModel.Clients.ActiveDirectory</AssemblyReference>
      <AssemblyReference>SimpleImpersonation</AssemblyReference>
      <AssemblyReference>Dapplo.Windows.Advapi32</AssemblyReference>
      <AssemblyReference>PInvoke.AdvApi32</AssemblyReference>
      <AssemblyReference>PInvoke.Kernel32</AssemblyReference>
      <AssemblyReference>PInvoke.Windows.Core</AssemblyReference>
      <AssemblyReference>System.Reactive</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>Microsoft.VisualStudio.Services.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Data.Entity</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Description: Checks if any drive is mounted that contains the path root of the mapped drive argument. If so will unmount, then mount the drive with the provided credentials and output the drive letter.&#xA;&#xA;Inputs:&#xA;in_Credentials &lt;String&gt;: The credential asset to retrieve from orchestrator.&#xA;in_MappedDrive &lt;String&gt;: The network path to mount.&#xA;&#xA;Outputs:&#xA;out_DriveLetter &lt;String&gt;:&#xA;&#xA;Pre Condition: NA&#xA;&#xA;Post Condition:&#xA;out_DriveLetter is mounted and visible to the robot." sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="username" />
      <Variable x:TypeArguments="ss:SecureString" Name="password" />
      <Variable x:TypeArguments="sco:Collection(x:String)" Name="response" />
    </Sequence.Variables>
    <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_21" Level="Info" Message="[&quot;Start MountFileServer.xaml, mapping: &quot; + in_MappedDrive]" />
    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke GetAppCredentials workflow" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_2" UnSafe="False" WorkflowFileName="Framework\GetAppCredentials.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="opt_Domain">UQ</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_Credential">[in_Credentials]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="opt_Host" />
        <OutArgument x:TypeArguments="x:String" x:Key="out_Username">[username]</OutArgument>
        <OutArgument x:TypeArguments="ss:SecureString" x:Key="out_Password">[password]</OutArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="out_Plaintext" />
      </ui:InvokeWorkflowFile.Arguments>
    </ui:InvokeWorkflowFile>
    <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_12" Level="Trace" Message="[&quot;Using username &quot; + username]" />
    <ui:InvokePowerShell x:TypeArguments="x:String" ContinueOnError="{x:Null}" CommandText="net use" DisplayName="Invoke List Mapped Drives" sap2010:WorkflowViewState.IdRef="InvokePowerShell`1_5" IsScript="True" Output="[response]" />
    <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_25" Level="Trace" Message="[&quot;Existing mappings: &quot; + String.Join(vbNewLine, response.Where(function(s) s.Trim &lt;&gt; &quot;&quot;))]" />
    <While DisplayName="While drives mapped" sap2010:WorkflowViewState.IdRef="While_1" Condition="[response.Any(Function(r) r.Contains(Path.GetPathRoot(in_MappedDrive)))]">
      <Sequence sap2010:WorkflowViewState.IdRef="Sequence_8">
        <Sequence.Variables>
          <Variable x:TypeArguments="ui:GenericValue" Name="driveLetter" />
        </Sequence.Variables>
        <Assign DisplayName="Assign first mapped drive" sap2010:WorkflowViewState.IdRef="Assign_13">
          <Assign.To>
            <OutArgument x:TypeArguments="ui:GenericValue">[driveLetter]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="ui:GenericValue">[response.First(Function(r) r.Contains(Path.GetPathRoot(in_MappedDrive)))]</InArgument>
          </Assign.Value>
        </Assign>
        <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_19" Level="Trace" Message="[&quot;Removing: &quot; + driveLetter]" />
        <Assign DisplayName="Assign letter part of name" sap2010:WorkflowViewState.IdRef="Assign_14">
          <Assign.To>
            <OutArgument x:TypeArguments="ui:GenericValue">[driveLetter]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="ui:GenericValue">[driveLetter.Substring(13, 2)]</InArgument>
          </Assign.Value>
        </Assign>
        <ui:InvokePowerShell x:TypeArguments="x:String" ContinueOnError="{x:Null}" CommandText="net use $drive /delete /yes" DisplayName="Invoke Remove Existing Mapping" sap2010:WorkflowViewState.IdRef="InvokePowerShell`1_13" IsScript="True" Output="[response]">
          <ui:InvokePowerShell.PowerShellVariables>
            <InArgument x:TypeArguments="x:String" x:Key="drive">[driveLetter]</InArgument>
          </ui:InvokePowerShell.PowerShellVariables>
        </ui:InvokePowerShell>
        <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_27" Level="Trace" Message="[&quot;Removed: &quot; + String.Join(vbNewLine, response.Where(function(s) s.Trim &lt;&gt; &quot;&quot;))]" />
        <ui:InvokePowerShell x:TypeArguments="x:String" ContinueOnError="{x:Null}" CommandText="net use" DisplayName="Invoke List Mapped Drives" sap2010:WorkflowViewState.IdRef="InvokePowerShell`1_12" IsScript="True" Output="[response]" />
        <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_26" Level="Trace" Message="[&quot;Existing mappings: &quot; + String.Join(vbNewLine, response.Where(function(s) s.Trim &lt;&gt; &quot;&quot;))]" />
      </Sequence>
    </While>
    <ui:InvokePowerShell x:TypeArguments="x:String" ContinueOnError="{x:Null}" CommandText="ping -n 1 $hostname" DisplayName="Invoke Ping Network Share" sap2010:WorkflowViewState.IdRef="InvokePowerShell`1_6" IsScript="True" Output="[response]">
      <ui:InvokePowerShell.PowerShellVariables>
        <InArgument x:TypeArguments="x:String" x:Key="hostname">[New Uri(in_MappedDrive).Host]</InArgument>
      </ui:InvokePowerShell.PowerShellVariables>
    </ui:InvokePowerShell>
    <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_10" Level="Trace" Message="[&quot;Ping host: &quot; + String.Join(vbNewLine, response.Where(function(s) s.Trim &lt;&gt; &quot;&quot;))]" />
    <ui:InvokePowerShell x:TypeArguments="x:String" ContinueOnError="{x:Null}" CommandText="net use * $drive /persistent:no /user:$username $password" DisplayName="Invoke Map Network Share" sap2010:WorkflowViewState.IdRef="InvokePowerShell`1_3" IsScript="True" Output="[response]">
      <ui:InvokePowerShell.PowerShellVariables>
        <InArgument x:TypeArguments="x:String" x:Key="drive">[in_MappedDrive]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="username">[username]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="password">[New System.Net.NetworkCredential(Nothing, password).Password]</InArgument>
      </ui:InvokePowerShell.PowerShellVariables>
    </ui:InvokePowerShell>
    <ui:CheckTrue DisplayName="Check Drive Mapped" ErrorMessage="[in_MappedDrive + &quot; was not mapped correctly&quot;]" Expression="[response.Any(Function(r) r.Contains(in_MappedDrive))]" sap2010:WorkflowViewState.IdRef="CheckTrue_1" />
    <Assign DisplayName="Assign mapping result" sap2010:WorkflowViewState.IdRef="Assign_11">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[out_DriveLetter]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[response.First(Function(r) r.Contains(in_MappedDrive))]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Trace" Message="[&quot;Mapped Network Share: &quot; + out_DriveLetter]" />
    <Assign DisplayName="Assign drive letter only" sap2010:WorkflowViewState.IdRef="Assign_12">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[out_DriveLetter]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[out_DriveLetter.Substring(6, 2) + "\"]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:CheckTrue DisplayName="Check Folder Accessible" ErrorMessage="[in_MappedDrive + &quot; was not accessible&quot;]" Expression="[Directory.Exists(in_MappedDrive)]" sap2010:WorkflowViewState.IdRef="CheckTrue_2" />
    <ui:CheckTrue DisplayName="Check Shortcut Accessible" ErrorMessage="[out_DriveLetter + &quot; was not accessible&quot;]" Expression="[Directory.Exists(out_DriveLetter)]" sap2010:WorkflowViewState.IdRef="CheckTrue_3" />
    <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_5" Level="Info" Message="[&quot;End MountFileServer.xaml, &quot; + in_MappedDrive + &quot; mounted as &quot; + out_DriveLetter]" />
    <sads:DebugSymbol.Symbol>d1lDOlxVaVBhdGhcUnBhVWlQYXRoUHJvY2Vzc1xQcm9jZXNzZXNcRkFfQmlsbGluZ01pbGVzdG9uZVxGaWxlU2VydmluZ1xNb3VudEZpbGVTZXJ2ZXIueGFtbEVeA7UBDgIBAWQFZLwBAgFcZQVuHQIBU28Fb6EBAgFQcAVw6wECAUxxBXHtAQIBSnIFkQENAgEvkgEFlgEbAgEqlwEFlwHlAQIBKJgBBZ4BGwIBHp8BBZ8B8AECARqgAQWnAQ4CARaoAQWoAa4BAgETqQEFsAEOAgEOsQEFsQHbAQIBCrIBBbIB3wECAQazAQWzAd0BAgECZHNkuQECAV1nQ2dFAgFba01rVwIBWWhGaFYCAVdqRmpQAgFVZb4BZeABAgFUb3RvngECAVFw3AFw6AECAU5wXHBlAgFNcXRx6gECAUtzB5ABEgIBMXJicqwBAgEwkgHoAZIB9AECAS2SAVySAXECASyUAUGUAV8CASuXAXSXAeIBAgEpmAGNApgBmQICASaYAVyYAZcBAgElmgE+mgFOAgEjnAFBnAF/AgEhmwFBmwFLAgEfnwGHAZ8BvwECAR2fAUGfAXsCARulATClAWgCARmiATGiAUICAReoAXOoAasBAgEUrgEwrgFXAgERqwExqwFCAgEPsQGGAbEBqgECAQ2xAUaxAXoCAQuyAYkBsgGuAQIBCbIBSLIBfQIBB7MBcrMB2gECAQN3CX4SAgFGfwl/owECAUSAAQmHARICAT+IAQmMAR8CATqNAQmNAecBAgE4jgEJjgHwAQIBNI8BCY8B8QECATJ8O3yFAQIBSXk8eUkCAUd/eH+gAQIBRYUBO4UBWQIBQoIBPIIBSQIBQIgB+gGIAYYCAgE9iAFgiAF9AgE8igFCigFPAgE7jQF4jQHkAQIBOY4B4QGOAe0BAgE2jgFgjgFpAgE1jwF4jwHuAQIBMw==</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="LogMessage_21" sap:VirtualizedContainerService.HintSize="464,91" />
      <sap2010:ViewStateData Id="InvokeWorkflowFile_2" sap:VirtualizedContainerService.HintSize="464,87" />
      <sap2010:ViewStateData Id="LogMessage_12" sap:VirtualizedContainerService.HintSize="464,91" />
      <sap2010:ViewStateData Id="InvokePowerShell`1_5" sap:VirtualizedContainerService.HintSize="464,59" />
      <sap2010:ViewStateData Id="LogMessage_25" sap:VirtualizedContainerService.HintSize="464,91" />
      <sap2010:ViewStateData Id="Assign_13" sap:VirtualizedContainerService.HintSize="314,60" />
      <sap2010:ViewStateData Id="LogMessage_19" sap:VirtualizedContainerService.HintSize="314,91" />
      <sap2010:ViewStateData Id="Assign_14" sap:VirtualizedContainerService.HintSize="314,60" />
      <sap2010:ViewStateData Id="InvokePowerShell`1_13" sap:VirtualizedContainerService.HintSize="314,59" />
      <sap2010:ViewStateData Id="LogMessage_27" sap:VirtualizedContainerService.HintSize="314,91" />
      <sap2010:ViewStateData Id="InvokePowerShell`1_12" sap:VirtualizedContainerService.HintSize="314,59" />
      <sap2010:ViewStateData Id="LogMessage_26" sap:VirtualizedContainerService.HintSize="314,91" />
      <sap2010:ViewStateData Id="Sequence_8" sap:VirtualizedContainerService.HintSize="336,875">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="While_1" sap:VirtualizedContainerService.HintSize="464,1033" />
      <sap2010:ViewStateData Id="InvokePowerShell`1_6" sap:VirtualizedContainerService.HintSize="464,59" />
      <sap2010:ViewStateData Id="LogMessage_10" sap:VirtualizedContainerService.HintSize="464,91" />
      <sap2010:ViewStateData Id="InvokePowerShell`1_3" sap:VirtualizedContainerService.HintSize="464,59" />
      <sap2010:ViewStateData Id="CheckTrue_1" sap:VirtualizedContainerService.HintSize="464,87" />
      <sap2010:ViewStateData Id="Assign_11" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="LogMessage_6" sap:VirtualizedContainerService.HintSize="464,91" />
      <sap2010:ViewStateData Id="Assign_12" sap:VirtualizedContainerService.HintSize="464,60" />
      <sap2010:ViewStateData Id="CheckTrue_2" sap:VirtualizedContainerService.HintSize="464,87" />
      <sap2010:ViewStateData Id="CheckTrue_3" sap:VirtualizedContainerService.HintSize="464,87" />
      <sap2010:ViewStateData Id="LogMessage_5" sap:VirtualizedContainerService.HintSize="464,91" />
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="486,3185">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Main_1" sap:VirtualizedContainerService.HintSize="526,3265" />
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>