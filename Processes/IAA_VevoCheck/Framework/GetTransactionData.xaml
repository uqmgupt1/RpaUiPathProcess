<Activity mc:Ignorable="sap sap2010 sads" x:Class="GetTransactionData"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:ui="http://schemas.uipath.com/workflow/activities"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_TransactionNumber" Type="InArgument(x:Int32)" />
    <x:Property Name="in_Config" Type="InArgument(scg:Dictionary(x:String, x:String))" />
    <x:Property Name="out_TransactionItem" Type="OutArgument(ui:QueueItem)" />
    <x:Property Name="out_TransactionField1" Type="OutArgument(x:String)" />
    <x:Property Name="out_TransactionID" Type="OutArgument(x:String)" />
    <x:Property Name="argument1" Type="InArgument(x:String)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>GetTransactionData_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>Microsoft.Activities</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>Microsoft.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>Microsoft.VisualStudio.Services.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Plugin.Workflow</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Description: Get data from spreadsheets, databases, email, web API or UiPath server queues. If no new data, set out_TransactionItem to Nothing. &#xA;&#xA;For a linear process (not repetitive), set out_TransactionItem only for in_TransactionNumber 1 - first and only transaction. &#xA;&#xA;If the process is repeatable, set io_TransactionData once for in_TransactionNumber 1, then assign a new out_TransactionItem by using the in_TransactionNumber to index io_TransactionData. Be aware that, at the end of the io_TransactionData collection, it is your responsibility to set out_TransactionItem to Nothing, thus ending the process." DisplayName="GetTransactionData" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="caseReference" />
      <Variable x:TypeArguments="x:Boolean" Name="isNoItemToDisplay" />
    </Sequence.Variables>
    <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_4" Level="Info" Message="[&quot;Start GetTransactionData.xaml&quot;]" />
    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke GetVevoCheckInputData" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_2" UnSafe="False" WorkflowFileName="CRM\CheckAvailableCaseReference.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <OutArgument x:TypeArguments="x:String" x:Key="out_CaseReference">[caseReference]</OutArgument>
        <OutArgument x:TypeArguments="x:Boolean" x:Key="out_isNoItemToDisplay">[isNoItemToDisplay]</OutArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_VevoDashboardName">[in_Config("VevoDashboardName")]</InArgument>
      </ui:InvokeWorkflowFile.Arguments>
    </ui:InvokeWorkflowFile>
    <Assign DisplayName="Assign TransactionID" sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[out_TransactionID]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[caseReference]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:Comment sap2010:WorkflowViewState.IdRef="Comment_1" Text="ITSADSSD-17656  : Get queue items for last 12 hours and check previous attempts for given case reference. If count is  more than 5, then assign case to Vevo Check Out category and throw application exception. &#xA;&#xA;This logic is to prevent infinite loop in case of system error while assigning to Vevo Check Out Category.&#xA; " />
    <Sequence DisplayName="Check if case already  processed by the robot five times " sap2010:WorkflowViewState.IdRef="Sequence_3">
      <Sequence.Variables>
        <Variable x:TypeArguments="scg:IEnumerable(ui:QueueItem)" Default="[Enumerable.Empty(of UiPath.Core.QueueItem)]" Name="queueItems" />
        <Variable x:TypeArguments="x:Int32" Name="case_counter" />
      </Sequence.Variables>
      <ui:GetQueueItems Duration="{x:Null}" Priority="{x:Null}" Reference="{x:Null}" Skip="{x:Null}" TimeoutMS="{x:Null}" Top="{x:Null}" DisplayName="Get Queue Items" FilterStrategy="StartsWith" From="[System.DateTime.Now.AddHours(-12)]" sap2010:WorkflowViewState.IdRef="GetQueueItems_1" QueueItemStates="All" QueueName="[in_Config(&quot;OrchestratorQueueName&quot;)]" Result="[queueItems]" To="[System.DateTime.Now]" />
      <ui:ForEach x:TypeArguments="ui:QueueItem" CurrentIndex="{x:Null}" DisplayName="For Each item in obtained QueueItem list" sap2010:WorkflowViewState.IdRef="ForEach`1_1" Values="[queueItems]">
        <ui:ForEach.Body>
          <ActivityAction x:TypeArguments="ui:QueueItem">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="ui:QueueItem" Name="item" />
            </ActivityAction.Argument>
            <Sequence DisplayName="Check specific case reference " sap2010:WorkflowViewState.IdRef="Sequence_4">
              <If Condition="[caseReference.Equals(item.SpecificContent(&quot;CaseRef&quot;).ToString)]" DisplayName="Get count " sap2010:WorkflowViewState.IdRef="If_2">
                <If.Then>
                  <Assign sap2010:WorkflowViewState.IdRef="Assign_2">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[case_counter]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[case_counter+1]</InArgument>
                    </Assign.Value>
                  </Assign>
                </If.Then>
              </If>
            </Sequence>
          </ActivityAction>
        </ui:ForEach.Body>
      </ui:ForEach>
      <If Condition="[case_counter &gt; cint(in_Config(&quot;VevoMaxRetryCount&quot;))]" DisplayName="Validate if count is greater than VevoMaxCaseCount" sap2010:WorkflowViewState.IdRef="If_3">
        <If.Then>
          <Sequence DisplayName="Skip this CaseRef to add in TransactionItem " sap2010:WorkflowViewState.IdRef="Sequence_5">
            <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_5" Level="Error" Message="[&quot;Attension - Case Reference : &quot;+ caseReference + &quot; re-attempted &quot;+  case_counter.ToString +&quot; times in last 12 hours&quot;]" />
            <ui:Click DelayBefore="{x:Null}" DelayMS="{x:Null}" ClickType="CLICK_DOUBLE" DisplayName="Open Case reference" sap2010:WorkflowViewState.IdRef="Click_1" KeyModifiers="None" MouseButton="BTN_LEFT" SendWindowMessages="False" SimulateClick="True">
              <ui:Click.CursorPosition>
                <ui:CursorPosition Position="Center">
                  <ui:CursorPosition.OffsetX>
                    <InArgument x:TypeArguments="x:Int32" />
                  </ui:CursorPosition.OffsetX>
                  <ui:CursorPosition.OffsetY>
                    <InArgument x:TypeArguments="x:Int32" />
                  </ui:CursorPosition.OffsetY>
                </ui:CursorPosition>
              </ui:Click.CursorPosition>
              <ui:Click.Target>
                <ui:Target ClippingRegion="{x:Null}" Element="{x:Null}" TimeoutMS="{x:Null}" Selector="[&quot;&lt;html app='chrome.exe' title='Oracle ® Service Cloud*' /&gt;&lt;webctrl tag='SPAN' aaname='&quot; + caseReference + &quot;' class='oj-datagrid-cell-text oj-flex' /&gt;&quot;]" WaitForReady="COMPLETE" />
              </ui:Click.Target>
            </ui:Click>
            <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke WriteNoteToCaseReference workflow" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_3" UnSafe="False" WorkflowFileName="CRM\WriteNoteToCaseReference.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="in_ErrorMsg">[in_Config("VevoMaxCountExceed")]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="in_CaseReference">[caseReference]</InArgument>
              </ui:InvokeWorkflowFile.Arguments>
            </ui:InvokeWorkflowFile>
            <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke AssignToVevoCheckOutCategory workflow" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_5" UnSafe="False" WorkflowFileName="CRM\AssignToVevoCheckOutCategory.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="in_VevoOutCategory">[in_Config("VevoCheckOutCategory")]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="in_CaseReference">[caseReference]</InArgument>
              </ui:InvokeWorkflowFile.Arguments>
            </ui:InvokeWorkflowFile>
            <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke SaveAndCloseCRMTicket workflow" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_4" UnSafe="False" WorkflowFileName="CRM\SaveAndCloseCRMTicket.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="in_CaseReference">[caseReference]</InArgument>
              </ui:InvokeWorkflowFile.Arguments>
            </ui:InvokeWorkflowFile>
            <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke SendEmail without attachment" UnSafe="False" WorkflowFileName="SendEmail.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_Config">[in_Config]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="receiverAddress">[in_Config("exceptionEmailAddress_"+ in_Config("OperatingEnvironment"))]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="body">[in_Config("VevoMaxCountExceedEmailErrorMsg") + caseReference]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="subject">["Environment : " + in_Config("OperatingEnvironment") +" ProcessName : " + in_Config("logF_BusinessProcessName") + " - VevoMaxRetryCountExceed"]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="attachmentPath" />
              </ui:InvokeWorkflowFile.Arguments>
              <sap2010:WorkflowViewState.IdRef>InvokeWorkflowFile_6</sap2010:WorkflowViewState.IdRef>
            </ui:InvokeWorkflowFile>
            <TerminateWorkflow DisplayName="Terminate Workflow" Exception="[new BusinessRuleException(&quot;Attension!!! Case Reference :&quot; + caseReference + &quot; rejected due to exceeding maximum re-attempts in last 12 hours&quot;)]" sap2010:WorkflowViewState.IdRef="TerminateWorkflow_1" Reason="[&quot;Attension!!! Case Reference :&quot; + caseReference + &quot; rejected due to exceeding maximum re-attempts in last 12 hours&quot;]" />
          </Sequence>
        </If.Then>
        <If.Else>
          <ui:AddTransactionItem ContinueOnError="{x:Null}" ServiceBaseAddress="{x:Null}" TimeoutMS="{x:Null}" DisplayName="Add Transaction Item" sap2010:WorkflowViewState.IdRef="AddTransactionItem_1" QueueType="[in_Config(&quot;OrchestratorQueueName&quot;)]" Reference="[caseReference]" TransactionItem="[out_TransactionItem]">
            <ui:AddTransactionItem.TransactionInformation>
              <InArgument x:TypeArguments="x:String" x:Key="Robot Username">[in_Config("RobotUsername")]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="CaseRef">[caseReference]</InArgument>
            </ui:AddTransactionItem.TransactionInformation>
          </ui:AddTransactionItem>
        </If.Else>
      </If>
    </Sequence>
    <sads:DebugSymbol.Symbol>d21DOlxVc2Vyc1x1cW1ndXB0MVxEb2N1bWVudHNcVWlQYXRoXFJwYVVpUGF0aFByb2Nlc3NcUHJvY2Vzc2VzXElBQV9WZXZvQ2hlY2tcRnJhbWV3b3JrXEdldFRyYW5zYWN0aW9uRGF0YS54YW1sPE4DvQEOAgEBUwVTogECAVpUBVodAgFSWwViDgIBTWMFY5IDAgFMZAW7ARACAQJTclOfAQIBW1ZLVloCAVhXUFdjAgFWVLkBVN8BAgFVWE1YbQIBU2AwYD8CAVBdMV1EAgFOZktmeQIBA2kHaaUDAgFGageAARQCATyBAQe6AQwCAQRpiwNpogMCAUtpwQJp8QICAUlpyQFp7gECAUhp+QJphwMCAUdqtgFqxAECAUVwDX0YAgE9gQEVgQFZAgEFgwELsAEWAgETswELuAEjAgEIcQ98FAIBPoQBDYQBlAICATiFAQ2TARgCATWUAQ2ZASUCAS+aAQ2fASUCASmgAQ2kASUCASWlAQ2uASUCARivAQ2vAb0DAgEUswGPArMBoAICARG2AUa2AVUCAQ+zAdQBswGEAgIBDbUBTbUBaQIBC7MBsQKzAcgCAgEJcR1xaQIBP3MTehwCAUCEAXuEAZECAgE5kQFnkQGhAgIBNpYBTJYBbQIBM5cBUZcBYAIBMZQBzQGUAfABAgEwnQFRnQFgAgEtnAFTnAF2AgErmgHRAZoB+AECASqiAVGiAWACASegAcoBoAHqAQIBJqkBRakBgwECASKoAVCoAZgBAgEfqgFIqgHYAQIBHKcBZKcBbwIBGqUBkQGlAaEBAgEZrwGvAq8BugMCARavAUuvAfEBAgEVeD14TQIBQ3U+dUwCAUE=</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="LogMessage_4" sap:VirtualizedContainerService.HintSize="583,91" />
      <sap2010:ViewStateData Id="InvokeWorkflowFile_2" sap:VirtualizedContainerService.HintSize="583,87" />
      <sap2010:ViewStateData Id="Assign_1" sap:VirtualizedContainerService.HintSize="583,60" />
      <sap2010:ViewStateData Id="Comment_1" sap:VirtualizedContainerService.HintSize="583,208" />
      <sap2010:ViewStateData Id="GetQueueItems_1" sap:VirtualizedContainerService.HintSize="561,22" />
      <sap2010:ViewStateData Id="Assign_2" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_2" sap:VirtualizedContainerService.HintSize="464,208">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_4" sap:VirtualizedContainerService.HintSize="486,332">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ForEach`1_1" sap:VirtualizedContainerService.HintSize="561,466">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LogMessage_5" sap:VirtualizedContainerService.HintSize="314,91" />
      <sap2010:ViewStateData Id="Click_1" sap:VirtualizedContainerService.HintSize="314,68" />
      <sap2010:ViewStateData Id="InvokeWorkflowFile_3" sap:VirtualizedContainerService.HintSize="314,87" />
      <sap2010:ViewStateData Id="InvokeWorkflowFile_5" sap:VirtualizedContainerService.HintSize="314,87" />
      <sap2010:ViewStateData Id="InvokeWorkflowFile_4" sap:VirtualizedContainerService.HintSize="314,87" />
      <sap2010:ViewStateData Id="InvokeWorkflowFile_6" sap:VirtualizedContainerService.HintSize="314,87" />
      <sap2010:ViewStateData Id="TerminateWorkflow_1" sap:VirtualizedContainerService.HintSize="314,22" />
      <sap2010:ViewStateData Id="Sequence_5" sap:VirtualizedContainerService.HintSize="336,893">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="AddTransactionItem_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_3" sap:VirtualizedContainerService.HintSize="561,1041" />
      <sap2010:ViewStateData Id="Sequence_3" sap:VirtualizedContainerService.HintSize="583,1733">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="605,2625">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetTransactionData_1" sap:VirtualizedContainerService.HintSize="645,2705" />
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>